// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider     = "sqlite"
    url          = "file:./dev.db"
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    createdAt     DateTime  @default(now())
    email         String?   @unique
    emailVerified DateTime?
    username      String?   @unique
    password      String?
    image         String?
    message       String    @default("Send me an anonymous message!")

    accounts           Account[]
    sentMessages       Message[]       @relation("sentMessages")
    sentGlobalMessages GlobalMessage[] @relation("sentGlobalMessages")
    receivedMessages   Message[]       @relation("receivedMessages")

    @@index([email, username])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Message {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    content     String
    receiverMsg String
    isOpened    Boolean  @default(false)
    reply       String?
    clue        String?

    senderId         String?
    sender           User?   @relation(name: "sentMessages", fields: [senderId], references: [id])
    receiverUsername String?
    receiverId       String
    receiver         User    @relation(name: "receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

    @@index([senderId, createdAt(sort: Desc)])
    @@index([receiverId, createdAt(sort: Desc)])
}

model GlobalMessage {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    content     String
    isAnonymous Boolean  @default(true)

    userId String?
    user   User?   @relation(name: "sentGlobalMessages", fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([updatedAt(sort: Desc)])
}
