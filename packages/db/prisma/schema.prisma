// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  createdAt     DateTime  @default(now())
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  message       String    @default("Send me an anonymous message!") @db.VarChar(100)

  accounts         Account[]
  sentMessages     Message[] @relation("sentMessages")
  receivedMessages Message[] @relation("receivedMessages")

  @@index([email, username])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String   @db.VarChar(255)
  receiverMsg String   @db.VarChar(100)
  isOpened    Boolean  @default(false)

  senderId   String?
  sender     User?   @relation(name: "sentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User    @relation(name: "receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([receiverId, createdAt(sort: Desc)])
}
