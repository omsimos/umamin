type Account {
  createdAt: Int!
  email: String!
  id: ID!
  picture: String!
}

input CreateMessageInput {
  content: String!
  question: String!
  receiverId: String!
  senderId: String
}

input CursorInput {
  createdAt: Int
  id: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Message {
  content: String!
  createdAt: Int!
  id: ID!
  question: String!
  receiver: User
  receiverId: String!
  reply: String
  updatedAt: Int
}

type MessageCursor {
  createdAt: Int
  id: String
}

input MessagesFromCursorInput {
  cursor: CursorInput
  type: String!
}

type MessagesWithCursor {
  cursor: MessageCursor
  data: [Message!]
  hasMore: Boolean!
}

type Mutation {
  createMessage(input: CreateMessageInput!): Message
  createReply(content: String!, messageId: String!): String
  deleteMessage(id: String!): String
  deleteNote: String
  updateNote(content: String!, isAnonymous: Boolean!): Note
  updatePicture(imageUrl: String): String
  updateQuietMode(quietMode: Boolean!): String
  updateUser(input: UpdateUserInput!): String
}

type Note {
  content: String!
  id: ID!
  isAnonymous: Boolean!
  updatedAt: Int
  user: PublicUser
}

type NoteCursor {
  id: String
  updatedAt: Int
}

input NotesFromCursorInput {
  id: String
  updatedAt: Int
}

type NotesWithCursor {
  cursor: NoteCursor
  data: [Note!]
  hasMore: Boolean!
}

type PublicUser {
  bio: String
  createdAt: Int!
  displayName: String
  id: ID!
  imageUrl: String
  question: String!
  quietMode: Boolean!
  username: String!
}

type Query {
  messages(type: String!): [Message!]!
  messagesFromCursor(input: MessagesFromCursorInput!): MessagesWithCursor!
  note: Note
  notes: [Note!]!
  notesFromCursor(cursor: NotesFromCursorInput!): NotesWithCursor!
  user: User
  userByUsername(username: String!): PublicUser
}

input UpdateUserInput {
  bio: String
  displayName: String!
  question: String!
  username: String!
}

type User {
  accounts: [Account!]
  bio: String
  createdAt: Int!
  displayName: String
  id: ID!
  imageUrl: String
  question: String!
  quietMode: Boolean!
  username: String!
}